module convex_poly(l) {
     hull() { for (point=l) translate (point) cube(0.0001); }
};

// compute the sum of a list of vectors
function sum_vects(l) = (len(l) == 0) ? [0,0,0] :
     sum_vects([for (i = [0:1:len(l)-2]) l[i]]) + l[len(l)-1];

// Todo : generate with a rec module
perm4 = [[3, 2, 4, 1],
 [2, 3, 1, 4],
 [3, 1, 4, 2],
 [3, 1, 2, 4],
 [4, 3, 2, 1],
 [4, 3, 1, 2],
 [4, 2, 1, 3],
 [4, 1, 2, 3],
 [4, 1, 3, 2],
 [4, 2, 3, 1],
 [3, 2, 1, 4],
 [3, 4, 1, 2],
 [1, 3, 2, 4],
 [2, 1, 3, 4],
 [2, 4, 1, 3],
 [1, 4, 3, 2],
 [1, 4, 2, 3],
 [2, 4, 3, 1],
 [3, 4, 2, 1],
 [1, 3, 4, 2],
 [1, 2, 3, 4],
 [2, 3, 4, 1],
 [2, 1, 4, 3],
 [1, 2, 4, 3]];
     
assneg4 = [[3, 1, 2, 4],
 [3, 2, 1, 4],
 [4, 2, 1, 3],
 [4, 3, 2, 1],
 [4, 1, 4, 1],
 [4, 3, 1, 2],
 [4, 1, 2, 3],
 [1, 4, 1, 4],
 [1, 6, 2, 1],
 [1, 6, 1, 2],
 [2, 1, 6, 1],
 [1, 2, 6, 1],
 [1, 2, 3, 4],
 [2, 1, 3, 4]];
 
asspos4 = [[1, 2, 4, 3],
 [1, 4, 3, 2],
 [4, 3, 2, 1],
 [3, 4, 2, 1],
 [3, 4, -1, 4],
 [2, 4, 3, 1],
 [4, 3, -1, 4],
 [2, 3, 4, 1],
 [1, 4, 1, 4],
 [4, 1, 4, 1],
 [1, 2, 3, 4],
 [1, 3, 4, 2],
 [4, -1, 4, 3],
 [4, -1, 3, 4]];
 
 assmix4 = [[3, 4, 1, 2],
 [4, 3, 1, 2],
 [1, 3, 2, 4],
 [4, 3, 2, 1],
 [3, 4, 2, 1],
 [4, 1, 1, 4],
 [1, 4, 4, 1],
 [1, 4, 2, 3],
 [2, 4, 1, 3],
 [1, 2, 6, 1],
 [2, 3, 1, 4],
 [1, 2, 3, 4],
 [4, -1, 6, 1],
 [4, -1, 3, 4]];
     
permtreepos4 = [[4, 1, 1, 4],
 [3, 4, 2, 1],
 [1, 4, 3, 2],
 [4, 3, 2, 1],
 [4, 3, -1, 4],
 [4, 1, 3, 2],
 [2, 4, 3, 1],
 [4, 2, 3, 1],
 [1, 4, 1, 4],
 [3, 2, 4, 1],
 [3, 4, -1, 4],
 [2, 3, 4, 1],
 [2, 1, 3, 4],
 [3, 1, 4, 2],
 [1, 2, 3, 4],
 [1, 3, 4, 2],
 [2, 1, 4, 3],
 [1, 2, 4, 3]];
 
permtreeneg4 = [[2, 1, 3, 4],
 [1, 4, 4, 1],
 [2, 4, 1, 3],
 [1, 4, 2, 3],
 [4, 1, 4, 1],
 [2, 1, 6, 1],
 [3, 4, 1, 2],
 [4, 3, 1, 2],
 [4, 1, 2, 3],
 [4, 2, 1, 3],
 [4, 3, 2, 1],
 [1, 3, 2, 4],
 [3, 4, 2, 1],
 [2, 3, 1, 4],
 [3, 1, 2, 4],
 [3, 2, 1, 4],
 [1, 2, 6, 1],
 [1, 2, 3, 4]];
 
 Cube4 = [[1, 2, 3, 4],
 [1, 6, -1, 4],
 [4, 3, 2, 1],
 [1, 6, 2, 1],
 [1, 2, 6, 1],
 [4, -1, 6, 1],
 [4, -1, 3, 4],
 [4, 3, -1, 4]];
 
 permcube4 = [[2, 1, 3, 4],
 [3, 4, 2, 1],
 [4, 1, 4, 1],
 [4, 3, 2, 1],
 [1, 2, 3, 4],
 [1, 4, 4, 1],
 [1, 4, 1, 4],
 [1, 2, 6, 1],
 [2, 1, 6, 1],
 [4, 3, -1, 4],
 [4, 1, 1, 4],
 [3, 4, -1, 4]];
 
 asscube4 = [[4, 1, 1, 4],
 [1, 4, 1, 4],
 [4, 3, 1, 2],
 [4, 3, 2, 1],
 [1, 6, 2, 1],
 [1, 6, 1, 2],
 [4, -1, 6, 1],
 [1, 2, 6, 1],
 [1, 2, 3, 4],
 [4, -1, 3, 4]];


// projection matrix 4D -> 3D
projmatrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1], [-1/3, -1/3, -1/3]];

//scale(10) convex_poly([for (p=perm4) p * projmatrix]);
//scale(10) convex_poly([for (p=permtreepos4) p * projmatrix]);
scale(10) convex_poly([for (p=assneg4) p * projmatrix]);
//scale(10) convex_poly([for (p=asspos4) p * projmatrix]);
//scale(10) convex_poly([for (p=permtreeneg4) p * projmatrix]);
//scale(10) convex_poly([for (p=Cube4) p * projmatrix]);
//scale(10) convex_poly([for (p=permcube4) p * projmatrix]);
//scale(10) convex_poly([for (p=asscube4) p * projmatrix]);
//scale(10) convex_poly([for (p=assmix4) p * projmatrix]);


